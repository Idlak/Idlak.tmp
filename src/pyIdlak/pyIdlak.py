# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pyIdlak')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pyIdlak')
    _pyIdlak = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyIdlak', [dirname(__file__)])
        except ImportError:
            import _pyIdlak
            return _pyIdlak
        try:
            _mod = imp.load_module('_pyIdlak', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pyIdlak = swig_import_helper()
    del swig_import_helper
else:
    import _pyIdlak
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

Empty = _pyIdlak.Empty
Tokenise = _pyIdlak.Tokenise
PosTag = _pyIdlak.PosTag
Pauses = _pyIdlak.Pauses
Phrasing = _pyIdlak.Phrasing
Pronounce = _pyIdlak.Pronounce
Syllabify = _pyIdlak.Syllabify
ContextExtraction = _pyIdlak.ContextExtraction
NumMods = _pyIdlak.NumMods

def PyIdlakBuffer_newfromstr(data):
    return _pyIdlak.PyIdlakBuffer_newfromstr(data)
PyIdlakBuffer_newfromstr = _pyIdlak.PyIdlakBuffer_newfromstr

def PyIdlakBuffer_delete(pybuf):
    return _pyIdlak.PyIdlakBuffer_delete(pybuf)
PyIdlakBuffer_delete = _pyIdlak.PyIdlakBuffer_delete

def PyIdlakBuffer_get(pybuf):
    return _pyIdlak.PyIdlakBuffer_get(pybuf)
PyIdlakBuffer_get = _pyIdlak.PyIdlakBuffer_get

def PyTxpParseOptions_new(usage):
    return _pyIdlak.PyTxpParseOptions_new(usage)
PyTxpParseOptions_new = _pyIdlak.PyTxpParseOptions_new

def PyTxpParseOptions_delete(pypo):
    return _pyIdlak.PyTxpParseOptions_delete(pypo)
PyTxpParseOptions_delete = _pyIdlak.PyTxpParseOptions_delete

def PyTxpParseOptions_PrintUsage(pypo, print_command_line=False):
    return _pyIdlak.PyTxpParseOptions_PrintUsage(pypo, print_command_line)
PyTxpParseOptions_PrintUsage = _pyIdlak.PyTxpParseOptions_PrintUsage

def PyTxpParseOptions_Read(pypo, argc):
    return _pyIdlak.PyTxpParseOptions_Read(pypo, argc)
PyTxpParseOptions_Read = _pyIdlak.PyTxpParseOptions_Read

def PyTxpParseOptions_NumArgs(pypo):
    return _pyIdlak.PyTxpParseOptions_NumArgs(pypo)
PyTxpParseOptions_NumArgs = _pyIdlak.PyTxpParseOptions_NumArgs

def PyTxpParseOptions_GetArg(pypo, n):
    return _pyIdlak.PyTxpParseOptions_GetArg(pypo, n)
PyTxpParseOptions_GetArg = _pyIdlak.PyTxpParseOptions_GetArg

def PyPugiXMLDocument_new():
    return _pyIdlak.PyPugiXMLDocument_new()
PyPugiXMLDocument_new = _pyIdlak.PyPugiXMLDocument_new

def PyPugiXMLDocument_delete(pypugidoc):
    return _pyIdlak.PyPugiXMLDocument_delete(pypugidoc)
PyPugiXMLDocument_delete = _pyIdlak.PyPugiXMLDocument_delete

def PyPugiXMLDocument_LoadString(pypugidoc, data):
    return _pyIdlak.PyPugiXMLDocument_LoadString(pypugidoc, data)
PyPugiXMLDocument_LoadString = _pyIdlak.PyPugiXMLDocument_LoadString

def PyPugiXMLDocument_SavePretty(pypugidoc):
    return _pyIdlak.PyPugiXMLDocument_SavePretty(pypugidoc)
PyPugiXMLDocument_SavePretty = _pyIdlak.PyPugiXMLDocument_SavePretty

def PyIdlakModule_new(modtype, pypo):
    return _pyIdlak.PyIdlakModule_new(modtype, pypo)
PyIdlakModule_new = _pyIdlak.PyIdlakModule_new

def PyIdlakModule_delete(pymod):
    return _pyIdlak.PyIdlakModule_delete(pymod)
PyIdlakModule_delete = _pyIdlak.PyIdlakModule_delete

def PyIdlakModule_process(pymod, pypugidoc):
    return _pyIdlak.PyIdlakModule_process(pymod, pypugidoc)
PyIdlakModule_process = _pyIdlak.PyIdlakModule_process
# This file is compatible with both classic and new-style classes.


